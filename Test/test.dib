#!javascript

/**
 * @param {number} n
 * @param {number[]} mem
 * @return {number}
 */
function fib(n, mem) {
  if (mem[n] != null) return mem[n];
  if (n == 1 || n == 2) {
    mem[n] = 1;
    return 1;
  } else {
    mem[n] = fib(n - 1, mem) + fib(n - 2, mem);
    return mem[n];
  }
}
console.log(fib(2,[]));

#!javascript

/**
 * @param {number[]} towers
 * @return {bool}
 */
function isTravelPossible(towers) {
  if (towers[0] == 0) return false;
  if (towers[0] >= towers.length) return true;
  var checker = false;
  var steps = towers[0];
  for (let i = 1; i <= steps; i++) {
    towers.shift();
    checker = isTravelPossible(towers);
    if (checker) return true;
  }
  return false;
}
console.log(isTravelPossible(2,[]));

#!javascript

/**
 * @param {any[]} array
 * @return {any[]}
 * shuffles the given array
 */
function shuffle(array) {
  var temp;
  var number;
  for (let i = 0; i < array.length; i++) {
    temp = array[i];
    number = Math.floor(Math.random() * array.length);
    array[i] = array[number];
    array[number] = temp;
  }
  return array;
}
console.log(shuffle([1,2,3,4,5]));

#!javascript

/**
 * @param {number[]} numbers
 * @param {String[1]} operations
 * @param {number} result
 * @return {bool} 
 * returns if an equation can be made from the given operations and numbers that would result in the "result"
 */
function Equation(numbers, operations, result) {
  if (numbers.length == 1) return [numbers[0]];
  var array = [];
  var temp = Equation(numbers.slice(1), operations, null);
  for (let i = 0; i < operations.length; i++) {
    for (let j = 0; j < temp.length; j++) {
      array.push(numbers[0] + operations[i] + temp[j]);
    }
  }
  if (result == null) return array;
  for (let k = 0; k < array.length; k++) {
    if (eval(array[k]) == result) return array[k];
  }
}
console.log(Equation());

#!javascript

/**
 * @param {number[]} nums
 * @return {number} 
 * returns the number of good pairs
 * A pair (i,j) is called good if nums[i] == nums[j] and i < j
 */
function numIdenticalPairs(nums) {
  var count = 0;
  for (let j = 0; j < nums.length; j++) {
    for (let i = 0; i < j; i++) {
      if (nums[i] == nums[j]) count++;
    }
  }
  return count;
};
console.log()

#!javascript

var titleToNumber = function (s) {
  var array = (s.split("")).reverse();
  var count = 0;
  for (let i = 0; i < array.length; i++) {
    count += Math.pow(26, i + 1) * array[i].charCodeAt(0) - 64;
  }
  return count;
};
console.log(titleToNumber());

#!javascript

/**
 * @param {string} s
 * @return {number}
 * returns the length of the last word
 */
var lengthOfLastWord = function(s) {
    return s.trim().split(" ").pop().length;
};

#!javascript

/**
 * @param {number[]} nums
 * @return {boolean}
 * returns if one element can be removed to make the function strictly increasing
 */
var canBeIncreasing = function (nums) {
  if (nums.length <3) return true;
  nums.unshift(0);
  nums.push(1001);
  var once = false;
  for (let i = 1; i < nums.length - 1; i++) {
    if (nums[i] >= nums[i+1]){
      if(once) return false;
      once = true;

      if(nums[i-1] >= nums[i+1]) nums[i+1] = nums[i];
      else nums[i] = nums[i-1];       
    }
  }
  return true;
};

// console.log(canBeIncreasing([1,2,10,5,7]));
console.log(canBeIncreasing([2,3,1,2]));
// console.log(canBeIncreasing([105,924,32,968]));

#!javascript

/**
 * @param {number[]} original
 * @param {number} m rows
 * @param {number} n cols
 * @return {number[][]}
 */
var construct2DArray = function(original, m, n) {
    if(original.length != m*n) return [];
    var matrix = ((new Array(m)).fill(0)).map(ele => (new Array(n)).fill(0));
    for (let i = 0; i < original.length; i++) {
        // console.log("row: " + Math.floor(i/n) + ", col: " + (i - (Math.floor(i/n) * n)));
        matrix[Math.floor(i/n)][i % n] = original[i];
    }
    return matrix;
};

console.log(construct2DArray([1,2,3], 1, 3));
console.log(construct2DArray([1,2,3,4,5,6], 2, 3));

#!javascript

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
    var s1 = "";
    var s2 = "";
    var result;
    
    while(!(l1 == undefined && l2 == undefined)){
        if(l1 != undefined) {s1 += l1.val; l1 = l1.next;}
        if(l2 != undefined) {s2 += l2.val; l2 = l2.next;}
    }
    
s1 = s1.split("")
s2 = s2.split("")

if (s1.length > s2.length) {
  s2 = s2.concat(new Array(s1.length - s2.length).fill("0"));
} else if (s2.length > s1.length) {
  s1 = s1.concat(new Array(s2.length - s1.length).fill("0"));
}

result = new Array(s1.length + 1).fill("0");

for (let i = 0; i < s1.length; i++) {
    result[i] = (+s1[i]) + (+s2[i]);
    if(result[i] > 9){
        result[i] = result[i] - 10;
        result[i+1]++;
    }
}

if(result[result.length-1] == "0") result.pop();

result.reverse();
    
    console.log(result);
    
    result[0] = {val:result[0], next:null};
    
    for(var i = 1; i < result.length; i++){
        result[i] = {val:result[i], next:result[i-1]};
    }
    
    return result.pop();
    // for(var i = 0; i < l1.length; i++){
    //     result[i] = l1[l1.length-i] + l2[l1.length-i];
    // }
    // return result;
};
